{"version":3,"file":"questionHandling.entry.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACS","sources":["webpack://phygital-tool-web/webpack/bootstrap","webpack://phygital-tool-web/webpack/runtime/make namespace object","webpack://phygital-tool-web/./src/js/questionHandling.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Checks if form input is empty\nfunction validateForm() {\n    const answer = document.getElementById(\"selectedAnswer\").value;\n    if (answer.trim() === \"\") {\n        alert(\"Please enter your answer.\");\n        return false; // answer is empty\n    }\n    return true;\n}\n// Logic for the slider in the range question. Makes sure the right value is returned.\nfunction configureSlider() {\n    const slider = document.getElementById(\"myRange\");\n    const output = document.getElementById(\"sliderValue\");\n    const labels = Array.from(document.querySelectorAll('.slider-labels span')).map(span => span.textContent || '');\n    if (slider) {\n        slider.oninput = function () {\n            const index = parseInt(slider.value, 10);\n            output.innerHTML = labels[index];\n        };\n    }\n    const submitButton = document.getElementById('submitButton');\n    if (submitButton) {\n        submitButton.addEventListener('click', function () {\n            var _a, _b;\n            const selectedValue = output.textContent || '';\n            const hiddenInput = document.createElement('input');\n            hiddenInput.type = 'hidden';\n            hiddenInput.name = 'selectedAnswer';\n            hiddenInput.value = selectedValue;\n            (_a = document.getElementById('answersForm')) === null || _a === void 0 ? void 0 : _a.appendChild(hiddenInput);\n            (_b = document.getElementById('answersForm')) === null || _b === void 0 ? void 0 : _b.submit();\n        });\n    }\n}\n// Toggles the buttons 'selected' class based on if the user pressed it.\nfunction configureAnswerButtons() {\n    const answerButtons = document.querySelectorAll('.answerButton');\n    answerButtons.forEach(button => {\n        button.addEventListener('click', function () {\n            button.classList.toggle('selected');\n        });\n    });\n}\n// Configures the submit button to return the correct selected value(s) when being pressed.\nfunction configureSubmitButton() {\n    const submitButton = document.getElementById('submitButton');\n    submitButton === null || submitButton === void 0 ? void 0 : submitButton.addEventListener('click', function () {\n        var _a, _b;\n        const selectedAnswers = [];\n        const answerButtons = document.querySelectorAll('.answerButton');\n        answerButtons.forEach(button => {\n            if (button.classList.contains('selected')) {\n                const value = button.getAttribute('value');\n                if (value !== null) { // Check for `null` before pushing\n                    selectedAnswers.push(value);\n                }\n            }\n        });\n        const hiddenInput = document.createElement('input');\n        hiddenInput.type = 'hidden';\n        hiddenInput.name = 'selectedAnswers';\n        hiddenInput.value = JSON.stringify(selectedAnswers);\n        (_a = document.getElementById('answersForm')) === null || _a === void 0 ? void 0 : _a.appendChild(hiddenInput);\n        (_b = document.getElementById('answersForm')) === null || _b === void 0 ? void 0 : _b.submit();\n    });\n}\n// Since the circular flow works with a timer, it's answer possibilities can't make it go to the next question immediately.\n// Uses the logic of the muliple choice question, but slightly altered so that it can only select one.\nfunction configureSubmitButtonSingleChoice() {\n    const submitButton = document.getElementById('submitButtonSingleChoice');\n    if (submitButton) {\n        console.log(\"woop woop\");\n    }\n    submitButton === null || submitButton === void 0 ? void 0 : submitButton.addEventListener('click', function () {\n        var _a, _b;\n        let selectedAnswer = \"no answer\";\n        const answerButtons = document.querySelectorAll('.answerButtonSingleChoice');\n        answerButtons.forEach(button => {\n            if (button.classList.contains('selected')) {\n                const value = button.getAttribute('value');\n                if (value) {\n                    selectedAnswer = value;\n                }\n            }\n        });\n        const hiddenInput = document.createElement('input');\n        hiddenInput.type = 'hidden';\n        hiddenInput.name = 'selectedAnswer';\n        hiddenInput.value = selectedAnswer;\n        (_a = document.querySelector('.answersFormSingleChoice')) === null || _a === void 0 ? void 0 : _a.appendChild(hiddenInput);\n        (_b = document.querySelector('.answersFormSingleChoice')) === null || _b === void 0 ? void 0 : _b.submit();\n    });\n}\n// Configures the answer buttons for a single choice question in a circular flow to deselect when another is pressed.\nfunction configureAnswerButtonsSingleChoice() {\n    const answerButtons = document.querySelectorAll('.answerButtonSingleChoice');\n    answerButtons.forEach(button => {\n        button.addEventListener('click', function () {\n            answerButtons.forEach(button => {\n                if (button.classList.contains('selected')) {\n                    button.classList.toggle('selected');\n                }\n            });\n            button.classList.toggle('selected');\n        });\n    });\n}\n// Initialize configurations\ndocument.addEventListener('DOMContentLoaded', () => {\n    configureAnswerButtons();\n    configureAnswerButtonsSingleChoice();\n    configureSubmitButton();\n    configureSubmitButtonSingleChoice();\n    configureSlider();\n});\nexport {};\n"],"names":[],"sourceRoot":""}